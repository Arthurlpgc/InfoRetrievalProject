                      Home   Problems   Submissions   Users   Contests   About >   Status   Runtimes   Tips   API   Github    Login | Register       This site works best with JavaScript enabled.     CCC '09 J5 - Degrees Of Separation View as PDF       Submit solution   All submissions   Best submissions    Points: 10   Time limit: 2.0s     Memory limit: 64M      Problem type  Graph Theory      The main socializing tool for students today is Facebook. There are many interesting computational questions connected to Facebook, such as the "degree of separation" between two people.  For example, in the diagram below, there are many different paths between Abby and Alberto. Some of these paths are:   Abby → Zoey → Alberto  Abby → Natalie → Zoey → Alberto  Abby → George → Ali → Kara → Richardo → Jeff → Alberto   The shortest path between Abby and Alberto has two steps (Abby → Zoey, and Zoey → Alberto), so we say the degree of separation is 2. Additionally, Alberto would be a friend of a friend of Abby.  You can assume an initial configuration of who is friends with who as outlined in the diagram above. You will need to store these relationships in your program. These relationships can change though, and your program needs to handle these changes. In particular, friendships can begin, possibly with new people. Friendships can end. You should be able to find friends of friends and determine the degree of separation between two people.  Input/Output Description  Your program will read in six possible commands, with the action to be performed by your program outlined below. You may assume that   x  x   and   y  y   are integers, with    x  ≠  y   x \ne y   ,    x  ≥  1   x \ge 1   ,    y  ≥  1   y \ge 1   ,    x  <  50   x < 50   and    y  <  50   y < 50   . You may also assume that instructions (i, d, n, f, s, q) occur one per line and parameters (zero, one or two integers) occur one per line.   i    x  x      y  y   - make person   x  x   and person   y  y   friends. If they are already friends, no change needs to be made. If either   x  x   or   y  y   is a new person, add them.  d    x  x      y  y   - delete the friendship between person   x  x   and person   y  y   .  n    x  x   - output the number of friends that person   x  x   has.  f    x  x   - output the number of "friends of friends" that person   x  x   has. Notice that   x  x   and direct friends of   x  x   are not counted as "friends of friends."  s    x  x      y  y   - output the degree of separation between   x  x   and   y  y   . If there is no path from   x  x   to   y  y   , output "Not connected".  q - quit the program.   Sample Input  i
20
10
i
20
9
n
20
f
20
s
20
6
q  Sample Output  2
3
4  Explanation   n 20 : Person 20 has two friends (10 and 9)  f 20 : The friends of friends of 20 are 8, 11, 12.  s 20 6 : The shortest path is 20 → 9 → 8 → 7 → 6.       Comments       1     aeternalis1  commented on Aug. 2, 2017 ← edited →     Oops mb i did not read the question correctly. I thought the diagram was just an example of how connections worked.           1     Anix55  commented on Feb. 17, 2016 ← edit 5 →    shortest path  can anyone explain this friends of friends thing            1     minecraftyugi  commented on Feb. 18, 2016    Re: shortest path  For every friend that a person has, count the total number of friends that that friend has, excluding the original person and the person's direct friends.            -1     FluffyPanda  commented on Jan. 14, 2016    CCC Problem Number  This problem is also an S3, not just a J5.            2     Xyene  commented on Jan. 14, 2016    Re: CCC Problem Number  Whenever there are duplicate problems, we use the junior code over the senior: ccc09j5s3 is more awkward (doesn't sort exceptionally well), and we don't support redirecting from ccc09s3 to ccc09j5 .               fork us on Github | like us on Facebook | help us translate | terms of service |    Deutsch (de)  English (en)  français (fr)  Română (ro)  Русский (ru)  srpski (latinica) (sr-latn)  Tiếng Việt (vi)  简体中文 (zh-hans)      
