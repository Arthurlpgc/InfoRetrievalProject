{"title": "Chef and his Students | CodeChef", "time-limit": 1000, "memory-limit": -1, "props": {"Problem code": "  CHEFSTUD ", "Input": " \n4", "Output": " \n0", "Author": " \n admin2 ", "Tester": " \n 6", "Date Added": " \n 22", "Time Limit": " \n 1 sec ", "Source Limit": " \n 50000 Bytes ", "Languages": " \n ADA", "now is": "  \n Your IP"}, "statement": "Chef is instructor of the famous course \"Introduction to Algorithms\" in a famous univerisity. There are  n  students in his class. There is not enough space in the class room, so students sit in a long hallway in a linear fashion. One day Chef was late to class. As a result, some of the students have formed pairs and are talking to each other, while the others are busy studying. This information is given to you by a string  s  of length  n , consisting of characters '*', <' and '>', where '*' denotes that the student is studying, '>' denotes that the corresponding student is talking to the student to the right, and '<' denotes that the corresponding student is talking to the student to the left. For example, consider a sample configuration of students -  *><* . Here students numbered 1 and 4 are busy studying, while the student 2 and 3 are talking to each other. In this example,  ><>< , student 1 and 2 are talking to each other, and 3 and 4 are also talking to each other. You are guaranteed that the given input is a valid configuration, i.e.  <>  can not be a valid string  s , as here student 1 is shown to be talking to left, but there is no student to the left. Same is the case for right. Similarly,  >><<  is also not a valid configuration, as students 2 and 3 are talking to each other, so student 1 won't be able to talk to student 2. When the students see their teacher coming, those who were talking get afraid and immediately turn around, i.e. students talking to left have now turned to the right, and the one talking to right have turned to the left. When Chef sees two students facing each other, he will assume that they were talking. A student who is busy studying will continue doing so. Chef will call each pair of students who were talking and punish them. Can you find out how many pairs of students will get punished?\n For example, in case  *><* , when students see Chef, their new configuration will be  *<>* . Chef sees that no students are talking to each other. So no one is punished. While in case  ><>< , the new configuration of students will be  <><> , Chef sees that student 2 and 3 are talking to each other and they will be punished. The first line of the input contains an integer  T  denoting the number of the test cases. Each test case contains a string  s  denoting the activities of students before students see Chef entering the class. For each test case, output a single integer denoting the number of pairs of students that will be punished. Example case 1.  The updated configuration will be  <> . No students are talking to each other, so no one will be punished. Example case 2 and 3.  These examples are already explained in the problem statement.    Fetching successful submissions Program should read from  standard input  and write to  standard output .  After you submit a solution you can see your results by clicking on the  [My Submissions]  tab on the problem page. Below are the possible results: \u00a0 CodeChef was created as a platform to help programmers make it big in the world of algorithms,  computer programming  and  programming contests . At CodeChef we work hard to revive the geek in you by hosting a  programming contest  at the start of the month and another smaller programming challenge in the middle of the month. We also aim to have training sessions and discussions related to  algorithms, binary search , technicalities like  array size  and the likes. Apart from providing a platform for  programming competitions , CodeChef also has various algorithm tutorials and forum discussions to help those who are new to the world of  computer programming .  Try your hand at one of our many practice problems and submit your solution in a language of your choice. Our  programming contest  judge accepts solutions in over 35+ programming languages. Preparing for coding contests were never this much fun! Receive points, and move up through the CodeChef ranks. Use our practice section to better prepare yourself for the multiple  programming challenges  that take place through-out the month on CodeChef.   Here is where you can show off your  computer programming  skills. Take part in our 10 day long monthly  coding contest  and the shorter format Cook-off  coding contest . Put yourself up for recognition and win great prizes. Our  programming contests  have prizes worth up to INR 20,000 (for Indian Community), $700 (for Global Community) and lots more CodeChef goodies up for grabs.  "}