{"title": "Pride", "time-limit": 2000, "memory-limit": 256, "props": {"like this": " choose two ", "Server time": "  Dec"}, "statement": "A. Pride time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You have an array  a  with length  n , you can perform operations. Each operation is like this: choose two  adjacent  elements from  a , say  x  and  y , and replace one of them with  gcd ( x ,\u2009 y ) , where  gcd  denotes the  greatest common divisor . What is the minimum number of operations you need to make all of the elements equal to  1 ? Input The first line of the input contains one integer  n  ( 1\u2009\u2264\u2009 n \u2009\u2264\u20092000 ) \u2014 the number of elements in the array. The second line contains  n  space separated integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 )\u00a0\u2014 the elements of the array. Output Print  -1 , if it is impossible to turn all numbers to  1 . Otherwise, print the minimum number of operations needed to make all numbers equal to  1 . Examples Input 5 2 2 3 4 6 Output 5 Input 4 2 4 6 8 Output -1 Input 3 2 6 9 Output 4 Note In the first sample you can turn all numbers to  1  using the following  5  moves:     [2,\u20092,\u20093,\u20094,\u20096] .    [2,\u20091,\u20093,\u20094,\u20096]     [2,\u20091,\u20093,\u20091,\u20096]     [2,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20091]   We can prove that in this case it is not possible to make all numbers one using less than  5  moves. A. Pride time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You have an array  a  with length  n , you can perform operations. Each operation is like this: choose two  adjacent  elements from  a , say  x  and  y , and replace one of them with  gcd ( x ,\u2009 y ) , where  gcd  denotes the  greatest common divisor . What is the minimum number of operations you need to make all of the elements equal to  1 ? Input The first line of the input contains one integer  n  ( 1\u2009\u2264\u2009 n \u2009\u2264\u20092000 ) \u2014 the number of elements in the array. The second line contains  n  space separated integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 )\u00a0\u2014 the elements of the array. Output Print  -1 , if it is impossible to turn all numbers to  1 . Otherwise, print the minimum number of operations needed to make all numbers equal to  1 . Examples Input 5 2 2 3 4 6 Output 5 Input 4 2 4 6 8 Output -1 Input 3 2 6 9 Output 4 Note In the first sample you can turn all numbers to  1  using the following  5  moves:     [2,\u20092,\u20093,\u20094,\u20096] .    [2,\u20091,\u20093,\u20094,\u20096]     [2,\u20091,\u20093,\u20091,\u20096]     [2,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20091]   We can prove that in this case it is not possible to make all numbers one using less than  5  moves. A. Pride time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You have an array  a  with length  n , you can perform operations. Each operation is like this: choose two  adjacent  elements from  a , say  x  and  y , and replace one of them with  gcd ( x ,\u2009 y ) , where  gcd  denotes the  greatest common divisor . What is the minimum number of operations you need to make all of the elements equal to  1 ? Input The first line of the input contains one integer  n  ( 1\u2009\u2264\u2009 n \u2009\u2264\u20092000 ) \u2014 the number of elements in the array. The second line contains  n  space separated integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 )\u00a0\u2014 the elements of the array. Output Print  -1 , if it is impossible to turn all numbers to  1 . Otherwise, print the minimum number of operations needed to make all numbers equal to  1 . Examples Input 5 2 2 3 4 6 Output 5 Input 4 2 4 6 8 Output -1 Input 3 2 6 9 Output 4 Note In the first sample you can turn all numbers to  1  using the following  5  moves:     [2,\u20092,\u20093,\u20094,\u20096] .    [2,\u20091,\u20093,\u20094,\u20096]     [2,\u20091,\u20093,\u20091,\u20096]     [2,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20091]   We can prove that in this case it is not possible to make all numbers one using less than  5  moves. A. Pride time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You have an array  a  with length  n , you can perform operations. Each operation is like this: choose two  adjacent  elements from  a , say  x  and  y , and replace one of them with  gcd ( x ,\u2009 y ) , where  gcd  denotes the  greatest common divisor . What is the minimum number of operations you need to make all of the elements equal to  1 ? Input The first line of the input contains one integer  n  ( 1\u2009\u2264\u2009 n \u2009\u2264\u20092000 ) \u2014 the number of elements in the array. The second line contains  n  space separated integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 )\u00a0\u2014 the elements of the array. Output Print  -1 , if it is impossible to turn all numbers to  1 . Otherwise, print the minimum number of operations needed to make all numbers equal to  1 . Examples Input 5 2 2 3 4 6 Output 5 Input 4 2 4 6 8 Output -1 Input 3 2 6 9 Output 4 Note In the first sample you can turn all numbers to  1  using the following  5  moves:     [2,\u20092,\u20093,\u20094,\u20096] .    [2,\u20091,\u20093,\u20094,\u20096]     [2,\u20091,\u20093,\u20091,\u20096]     [2,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20091]   We can prove that in this case it is not possible to make all numbers one using less than  5  moves. A. Pride time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You have an array  a  with length  n , you can perform operations. Each operation is like this: choose two  adjacent  elements from  a , say  x  and  y , and replace one of them with  gcd ( x ,\u2009 y ) , where  gcd  denotes the  greatest common divisor . What is the minimum number of operations you need to make all of the elements equal to  1 ? Input The first line of the input contains one integer  n  ( 1\u2009\u2264\u2009 n \u2009\u2264\u20092000 ) \u2014 the number of elements in the array. The second line contains  n  space separated integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 )\u00a0\u2014 the elements of the array. Output Print  -1 , if it is impossible to turn all numbers to  1 . Otherwise, print the minimum number of operations needed to make all numbers equal to  1 . Examples Input 5 2 2 3 4 6 Output 5 Input 4 2 4 6 8 Output -1 Input 3 2 6 9 Output 4 Note In the first sample you can turn all numbers to  1  using the following  5  moves:     [2,\u20092,\u20093,\u20094,\u20096] .    [2,\u20091,\u20093,\u20094,\u20096]     [2,\u20091,\u20093,\u20091,\u20096]     [2,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20091]   We can prove that in this case it is not possible to make all numbers one using less than  5  moves. A. Pride time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You have an array  a  with length  n , you can perform operations. Each operation is like this: choose two  adjacent  elements from  a , say  x  and  y , and replace one of them with  gcd ( x ,\u2009 y ) , where  gcd  denotes the  greatest common divisor . What is the minimum number of operations you need to make all of the elements equal to  1 ? Input The first line of the input contains one integer  n  ( 1\u2009\u2264\u2009 n \u2009\u2264\u20092000 ) \u2014 the number of elements in the array. The second line contains  n  space separated integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 )\u00a0\u2014 the elements of the array. Output Print  -1 , if it is impossible to turn all numbers to  1 . Otherwise, print the minimum number of operations needed to make all numbers equal to  1 . Examples Input 5 2 2 3 4 6 Output 5 Input 4 2 4 6 8 Output -1 Input 3 2 6 9 Output 4 Note In the first sample you can turn all numbers to  1  using the following  5  moves:     [2,\u20092,\u20093,\u20094,\u20096] .    [2,\u20091,\u20093,\u20094,\u20096]     [2,\u20091,\u20093,\u20091,\u20096]     [2,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20091]   We can prove that in this case it is not possible to make all numbers one using less than  5  moves. A. Pride time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You have an array  a  with length  n , you can perform operations. Each operation is like this: choose two  adjacent  elements from  a , say  x  and  y , and replace one of them with  gcd ( x ,\u2009 y ) , where  gcd  denotes the  greatest common divisor . What is the minimum number of operations you need to make all of the elements equal to  1 ? Input The first line of the input contains one integer  n  ( 1\u2009\u2264\u2009 n \u2009\u2264\u20092000 ) \u2014 the number of elements in the array. The second line contains  n  space separated integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 )\u00a0\u2014 the elements of the array. Output Print  -1 , if it is impossible to turn all numbers to  1 . Otherwise, print the minimum number of operations needed to make all numbers equal to  1 . Examples Input 5 2 2 3 4 6 Output 5 Input 4 2 4 6 8 Output -1 Input 3 2 6 9 Output 4 Note In the first sample you can turn all numbers to  1  using the following  5  moves:     [2,\u20092,\u20093,\u20094,\u20096] .    [2,\u20091,\u20093,\u20094,\u20096]     [2,\u20091,\u20093,\u20091,\u20096]     [2,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20091]   We can prove that in this case it is not possible to make all numbers one using less than  5  moves. A. Pride time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You have an array  a  with length  n , you can perform operations. Each operation is like this: choose two  adjacent  elements from  a , say  x  and  y , and replace one of them with  gcd ( x ,\u2009 y ) , where  gcd  denotes the  greatest common divisor . What is the minimum number of operations you need to make all of the elements equal to  1 ? Input The first line of the input contains one integer  n  ( 1\u2009\u2264\u2009 n \u2009\u2264\u20092000 ) \u2014 the number of elements in the array. The second line contains  n  space separated integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 )\u00a0\u2014 the elements of the array. Output Print  -1 , if it is impossible to turn all numbers to  1 . Otherwise, print the minimum number of operations needed to make all numbers equal to  1 . Examples Input 5 2 2 3 4 6 Output 5 Input 4 2 4 6 8 Output -1 Input 3 2 6 9 Output 4 Note In the first sample you can turn all numbers to  1  using the following  5  moves:     [2,\u20092,\u20093,\u20094,\u20096] .    [2,\u20091,\u20093,\u20094,\u20096]     [2,\u20091,\u20093,\u20091,\u20096]     [2,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20096]     [1,\u20091,\u20091,\u20091,\u20091]   We can prove that in this case it is not possible to make all numbers one using less than  5  moves."}