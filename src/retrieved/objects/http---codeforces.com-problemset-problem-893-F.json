{"title": "Subtree Minimum Query", "time-limit": 6000, "memory-limit": 512, "props": {"are met": "     x ", "as follows": " Let ", "Server time": "  Dec"}, "statement": "F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5 F. Subtree Minimum Query time limit per test 6 seconds memory limit per test 512 megabytes input standard input output standard output You are given a rooted tree consisting of  n  vertices. Each vertex has a number written on it; number  a i  is written on vertex  i . Let's denote  d ( i ,\u2009 j )  as the distance between vertices  i  and  j  in the tree (that is, the number of edges in the shortest path from  i  to  j ). Also let's denote the  k -blocked subtree  of vertex  x  as the set of vertices  y  such that both these conditions are met:     x  is an ancestor of  y  (every vertex is an ancestor of itself);    d ( x ,\u2009 y )\u2009\u2264\u2009 k .  You are given  m  queries to the tree.  i -th query is represented by two numbers  x i  and  k i , and the answer to this query is the minimum value of  a j  among such vertices  j  such that  j  belongs to  k i -blocked subtree of  x i . Write a program that would process these queries quickly! Note that the queries are given in a modified way . Input The first line contains two integers  n  and  r  ( 1\u2009\u2264\u2009 r \u2009\u2264\u2009 n \u2009\u2264\u2009100000 ) \u2014 the number of vertices in the tree and the index of the root, respectively. The second line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u200910 9 ) \u2014 the numbers written on the vertices. Then  n \u2009-\u20091  lines follow, each containing two integers  x  and  y  ( 1\u2009\u2264\u2009 x ,\u2009 y \u2009\u2264\u2009 n ) and representing an edge between vertices  x  and  y . It is guaranteed that these edges form a tree. Next line contains one integer  m  ( 1\u2009\u2264\u2009 m \u2009\u2264\u200910 6 ) \u2014 the number of queries to process. Then  m  lines follow,  i -th line containing two numbers  p i  and  q i , which can be used to restore  i -th query ( 1\u2009\u2264\u2009 p i ,\u2009 q i \u2009\u2264\u2009 n ). i -th query can be restored as follows: Let  last  be the answer for previous query (or  0  if  i \u2009=\u20091 ). Then  x i \u2009=\u2009(( p i \u2009+\u2009 last )\u2009 mod \u2009 n )\u2009+\u20091 , and  k i \u2009=\u2009( q i \u2009+\u2009 last )\u2009 mod \u2009 n . Output Print  m  integers.  i -th of them has to be equal to the answer to  i -th query. Example Input 5 2 1 3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5"}