{"props": {"Server time": "  Oct", "single integer": " the minimum "}, "title": "Yet Another Minimization Problem", "time-limit": 2000, "statement": "F. Yet Another Minimization Problem time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You are given an array of  n  integers  a 1 ...  a n . The cost of a subsegment is the number of unordered pairs of distinct indices within the subsegment that contain equal elements. Split the given array into  k  non-intersecting non-empty subsegments so that the sum of their costs is minimum possible. Each element should be present in exactly one subsegment. Input The first line contains two integers  n  and  k  ( 2\u2009\u2264\u2009 n \u2009\u2264\u200910 5 ,  2\u2009\u2264\u2009 k \u2009\u2264\u2009 min  ( n ,\u200920))  \u00a0\u2014 the length of the array and the number of segments you need to split the array into. The next line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u2009 n )\u00a0\u2014 the elements of the array. Output Print single integer: the minimum possible total cost of resulting subsegments. Examples Input 7 3 1 1 3 3 3 2 1 Output 1 Input 10 2 1 2 1 2 1 2 1 2 1 2 Output 8 Input 13 3 1 2 2 2 1 2 1 1 1 2 2 1 1 Output 9 Note In the first example it's optimal to split the sequence into the following three subsegments:  [1] ,  [1,\u20093] ,  [3,\u20093,\u20092,\u20091] . The costs are  0 ,  0  and  1 , thus the answer is  1 . In the second example it's optimal to split the sequence in two equal halves. The cost for each half is  4 . In the third example it's optimal to split the sequence in the following way:  [1,\u20092,\u20092,\u20092,\u20091] ,  [2,\u20091,\u20091,\u20091,\u20092] ,  [2,\u20091,\u20091] . The costs are  4 ,  4 ,  1 . F. Yet Another Minimization Problem time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You are given an array of  n  integers  a 1 ...  a n . The cost of a subsegment is the number of unordered pairs of distinct indices within the subsegment that contain equal elements. Split the given array into  k  non-intersecting non-empty subsegments so that the sum of their costs is minimum possible. Each element should be present in exactly one subsegment. Input The first line contains two integers  n  and  k  ( 2\u2009\u2264\u2009 n \u2009\u2264\u200910 5 ,  2\u2009\u2264\u2009 k \u2009\u2264\u2009 min  ( n ,\u200920))  \u00a0\u2014 the length of the array and the number of segments you need to split the array into. The next line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u2009 n )\u00a0\u2014 the elements of the array. Output Print single integer: the minimum possible total cost of resulting subsegments. Examples Input 7 3 1 1 3 3 3 2 1 Output 1 Input 10 2 1 2 1 2 1 2 1 2 1 2 Output 8 Input 13 3 1 2 2 2 1 2 1 1 1 2 2 1 1 Output 9 Note In the first example it's optimal to split the sequence into the following three subsegments:  [1] ,  [1,\u20093] ,  [3,\u20093,\u20092,\u20091] . The costs are  0 ,  0  and  1 , thus the answer is  1 . In the second example it's optimal to split the sequence in two equal halves. The cost for each half is  4 . In the third example it's optimal to split the sequence in the following way:  [1,\u20092,\u20092,\u20092,\u20091] ,  [2,\u20091,\u20091,\u20091,\u20092] ,  [2,\u20091,\u20091] . The costs are  4 ,  4 ,  1 . F. Yet Another Minimization Problem time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You are given an array of  n  integers  a 1 ...  a n . The cost of a subsegment is the number of unordered pairs of distinct indices within the subsegment that contain equal elements. Split the given array into  k  non-intersecting non-empty subsegments so that the sum of their costs is minimum possible. Each element should be present in exactly one subsegment. Input The first line contains two integers  n  and  k  ( 2\u2009\u2264\u2009 n \u2009\u2264\u200910 5 ,  2\u2009\u2264\u2009 k \u2009\u2264\u2009 min  ( n ,\u200920))  \u00a0\u2014 the length of the array and the number of segments you need to split the array into. The next line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u2009 n )\u00a0\u2014 the elements of the array. Output Print single integer: the minimum possible total cost of resulting subsegments. Examples Input 7 3 1 1 3 3 3 2 1 Output 1 Input 10 2 1 2 1 2 1 2 1 2 1 2 Output 8 Input 13 3 1 2 2 2 1 2 1 1 1 2 2 1 1 Output 9 Note In the first example it's optimal to split the sequence into the following three subsegments:  [1] ,  [1,\u20093] ,  [3,\u20093,\u20092,\u20091] . The costs are  0 ,  0  and  1 , thus the answer is  1 . In the second example it's optimal to split the sequence in two equal halves. The cost for each half is  4 . In the third example it's optimal to split the sequence in the following way:  [1,\u20092,\u20092,\u20092,\u20091] ,  [2,\u20091,\u20091,\u20091,\u20092] ,  [2,\u20091,\u20091] . The costs are  4 ,  4 ,  1 . F. Yet Another Minimization Problem time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You are given an array of  n  integers  a 1 ...  a n . The cost of a subsegment is the number of unordered pairs of distinct indices within the subsegment that contain equal elements. Split the given array into  k  non-intersecting non-empty subsegments so that the sum of their costs is minimum possible. Each element should be present in exactly one subsegment. Input The first line contains two integers  n  and  k  ( 2\u2009\u2264\u2009 n \u2009\u2264\u200910 5 ,  2\u2009\u2264\u2009 k \u2009\u2264\u2009 min  ( n ,\u200920))  \u00a0\u2014 the length of the array and the number of segments you need to split the array into. The next line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u2009 n )\u00a0\u2014 the elements of the array. Output Print single integer: the minimum possible total cost of resulting subsegments. Examples Input 7 3 1 1 3 3 3 2 1 Output 1 Input 10 2 1 2 1 2 1 2 1 2 1 2 Output 8 Input 13 3 1 2 2 2 1 2 1 1 1 2 2 1 1 Output 9 Note In the first example it's optimal to split the sequence into the following three subsegments:  [1] ,  [1,\u20093] ,  [3,\u20093,\u20092,\u20091] . The costs are  0 ,  0  and  1 , thus the answer is  1 . In the second example it's optimal to split the sequence in two equal halves. The cost for each half is  4 . In the third example it's optimal to split the sequence in the following way:  [1,\u20092,\u20092,\u20092,\u20091] ,  [2,\u20091,\u20091,\u20091,\u20092] ,  [2,\u20091,\u20091] . The costs are  4 ,  4 ,  1 . F. Yet Another Minimization Problem time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You are given an array of  n  integers  a 1 ...  a n . The cost of a subsegment is the number of unordered pairs of distinct indices within the subsegment that contain equal elements. Split the given array into  k  non-intersecting non-empty subsegments so that the sum of their costs is minimum possible. Each element should be present in exactly one subsegment. Input The first line contains two integers  n  and  k  ( 2\u2009\u2264\u2009 n \u2009\u2264\u200910 5 ,  2\u2009\u2264\u2009 k \u2009\u2264\u2009 min  ( n ,\u200920))  \u00a0\u2014 the length of the array and the number of segments you need to split the array into. The next line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u2009 n )\u00a0\u2014 the elements of the array. Output Print single integer: the minimum possible total cost of resulting subsegments. Examples Input 7 3 1 1 3 3 3 2 1 Output 1 Input 10 2 1 2 1 2 1 2 1 2 1 2 Output 8 Input 13 3 1 2 2 2 1 2 1 1 1 2 2 1 1 Output 9 Note In the first example it's optimal to split the sequence into the following three subsegments:  [1] ,  [1,\u20093] ,  [3,\u20093,\u20092,\u20091] . The costs are  0 ,  0  and  1 , thus the answer is  1 . In the second example it's optimal to split the sequence in two equal halves. The cost for each half is  4 . In the third example it's optimal to split the sequence in the following way:  [1,\u20092,\u20092,\u20092,\u20091] ,  [2,\u20091,\u20091,\u20091,\u20092] ,  [2,\u20091,\u20091] . The costs are  4 ,  4 ,  1 . F. Yet Another Minimization Problem time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You are given an array of  n  integers  a 1 ...  a n . The cost of a subsegment is the number of unordered pairs of distinct indices within the subsegment that contain equal elements. Split the given array into  k  non-intersecting non-empty subsegments so that the sum of their costs is minimum possible. Each element should be present in exactly one subsegment. Input The first line contains two integers  n  and  k  ( 2\u2009\u2264\u2009 n \u2009\u2264\u200910 5 ,  2\u2009\u2264\u2009 k \u2009\u2264\u2009 min  ( n ,\u200920))  \u00a0\u2014 the length of the array and the number of segments you need to split the array into. The next line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u2009 n )\u00a0\u2014 the elements of the array. Output Print single integer: the minimum possible total cost of resulting subsegments. Examples Input 7 3 1 1 3 3 3 2 1 Output 1 Input 10 2 1 2 1 2 1 2 1 2 1 2 Output 8 Input 13 3 1 2 2 2 1 2 1 1 1 2 2 1 1 Output 9 Note In the first example it's optimal to split the sequence into the following three subsegments:  [1] ,  [1,\u20093] ,  [3,\u20093,\u20092,\u20091] . The costs are  0 ,  0  and  1 , thus the answer is  1 . In the second example it's optimal to split the sequence in two equal halves. The cost for each half is  4 . In the third example it's optimal to split the sequence in the following way:  [1,\u20092,\u20092,\u20092,\u20091] ,  [2,\u20091,\u20091,\u20091,\u20092] ,  [2,\u20091,\u20091] . The costs are  4 ,  4 ,  1 . F. Yet Another Minimization Problem time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You are given an array of  n  integers  a 1 ...  a n . The cost of a subsegment is the number of unordered pairs of distinct indices within the subsegment that contain equal elements. Split the given array into  k  non-intersecting non-empty subsegments so that the sum of their costs is minimum possible. Each element should be present in exactly one subsegment. Input The first line contains two integers  n  and  k  ( 2\u2009\u2264\u2009 n \u2009\u2264\u200910 5 ,  2\u2009\u2264\u2009 k \u2009\u2264\u2009 min  ( n ,\u200920))  \u00a0\u2014 the length of the array and the number of segments you need to split the array into. The next line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u2009 n )\u00a0\u2014 the elements of the array. Output Print single integer: the minimum possible total cost of resulting subsegments. Examples Input 7 3 1 1 3 3 3 2 1 Output 1 Input 10 2 1 2 1 2 1 2 1 2 1 2 Output 8 Input 13 3 1 2 2 2 1 2 1 1 1 2 2 1 1 Output 9 Note In the first example it's optimal to split the sequence into the following three subsegments:  [1] ,  [1,\u20093] ,  [3,\u20093,\u20092,\u20091] . The costs are  0 ,  0  and  1 , thus the answer is  1 . In the second example it's optimal to split the sequence in two equal halves. The cost for each half is  4 . In the third example it's optimal to split the sequence in the following way:  [1,\u20092,\u20092,\u20092,\u20091] ,  [2,\u20091,\u20091,\u20091,\u20092] ,  [2,\u20091,\u20091] . The costs are  4 ,  4 ,  1 . F. Yet Another Minimization Problem time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output You are given an array of  n  integers  a 1 ...  a n . The cost of a subsegment is the number of unordered pairs of distinct indices within the subsegment that contain equal elements. Split the given array into  k  non-intersecting non-empty subsegments so that the sum of their costs is minimum possible. Each element should be present in exactly one subsegment. Input The first line contains two integers  n  and  k  ( 2\u2009\u2264\u2009 n \u2009\u2264\u200910 5 ,  2\u2009\u2264\u2009 k \u2009\u2264\u2009 min  ( n ,\u200920))  \u00a0\u2014 the length of the array and the number of segments you need to split the array into. The next line contains  n  integers  a 1 ,\u2009 a 2 ,\u2009...,\u2009 a n  ( 1\u2009\u2264\u2009 a i \u2009\u2264\u2009 n )\u00a0\u2014 the elements of the array. Output Print single integer: the minimum possible total cost of resulting subsegments. Examples Input 7 3 1 1 3 3 3 2 1 Output 1 Input 10 2 1 2 1 2 1 2 1 2 1 2 Output 8 Input 13 3 1 2 2 2 1 2 1 1 1 2 2 1 1 Output 9 Note In the first example it's optimal to split the sequence into the following three subsegments:  [1] ,  [1,\u20093] ,  [3,\u20093,\u20092,\u20091] . The costs are  0 ,  0  and  1 , thus the answer is  1 . In the second example it's optimal to split the sequence in two equal halves. The cost for each half is  4 . In the third example it's optimal to split the sequence in the following way:  [1,\u20092,\u20092,\u20092,\u20091] ,  [2,\u20091,\u20091,\u20091,\u20092] ,  [2,\u20091,\u20091] . The costs are  4 ,  4 ,  1 .", "memory-limit": 256}