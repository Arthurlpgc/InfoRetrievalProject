{"title": "Willem, Chtholly and Seniorious", "time-limit": 2000, "memory-limit": 256, "props": {"of operations": "   1 ", "x ": " Print the ", "y ": " Print the ", "pseudo code": " def rnd", "to n": "     a", "to m": "     op ", "else": "         x ", "operations are": "     2 6 ", "Server time": "  Dec"}, "statement": "C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5   C. Willem, Chtholly and Seniorious time limit per test 2 seconds memory limit per test 256 megabytes input standard input output standard output \u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with Seniorious... \u2014 I'll have a look... Seniorious is made by linking special talismans in particular order. After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly. Seniorious has  n  pieces of talisman. Willem puts them in a line, the  i -th of which is an integer  a i . In order to maintain it, Willem needs to perform  m  operations. There are four types of operations:   1  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  a i \u2009+\u2009 x  to  a i .   2  l   r   x : For each  i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , assign  x  to  a i .   3  l   r   x : Print the  x -th smallest number in the index range  [ l ,\u2009 r ] , i.e. the element at the  x -th position if all the elements  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r  are taken and sorted into an array of non-decreasing integers. It's guaranteed that  1\u2009\u2264\u2009 x \u2009\u2264\u2009 r \u2009-\u2009 l \u2009+\u20091 .   4  l   r   x   y : Print the sum of the  x -th power of  a i  such that  l \u2009\u2264\u2009 i \u2009\u2264\u2009 r , modulo  y , i.e.  . Input The only line contains four integers  n ,\u2009 m ,\u2009 seed ,\u2009 v max  ( 1\u2009\u2264\u2009 n ,\u2009 m \u2009\u2264\u200910 5 ,\u20090\u2009\u2264\u2009 seed \u2009<\u200910 9 \u2009+\u20097,\u20091\u2009\u2264\u2009 vmax \u2009\u2264\u200910 9 ). The initial values and operations are generated using following pseudo code: def rnd():     ret = seed     seed = (seed * 7 + 13) mod 1000000007     return ret for i = 1 to n:     a[i] = (rnd() mod vmax) + 1 for i = 1 to m:     op = (rnd() mod 4) + 1     l = (rnd() mod n) + 1     r = (rnd() mod n) + 1     if (l > r):           swap(l, r)     if (op == 3):         x = (rnd() mod (r - l + 1)) + 1     else:         x = (rnd() mod vmax) + 1     if (op == 4):         y = (rnd() mod vmax) + 1 Here  op  is the type of the operation mentioned in the legend. Output For each operation of types  3  or  4 , output a line containing the answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1 3 3 Note In the first example, the initial array is  {8,\u20099,\u20097,\u20092,\u20093,\u20091,\u20095,\u20096,\u20094,\u20098} . The operations are:     2 6 7 9     1 3 10 8     4 4 6 2 4     1 4 5 8     2 1 7 1     4 7 9 4 4     1 2 7 9     4 5 8 1 1     2 5 7 5     4 3 10 8 5  "}