           C  O  J   Thinking better!    Caribbean Online Judge                   Podios del Caribe en los Concursos Regionales / Equipos caribe√±os en las Finales Mundiales    LATAM Champions at ACM-ICPC Regional Contests / LATAM Champions at ACM-ICPC World Finals    The 2017 ACM-ICPC Caribbean Finals     October 8, 2017
            -
            16:58:58      Home      Downloads      Tools      Forum      FAQ      Links      About      Contact us               Login                    Register       Forgot password?   Terms of service              24 hour archive      Problems  Judgments  Standings   Users   Institutions   Countries      Compare users   Statistics             Real contests      Coming   Running   Previous (587)   Standings  Statistics                 24 hour archive: Problem       Submissions  Best solutions  PDF       1001
				- Pipes  1001 - Pipes  1001 - Pipes         Statistics  Sub: 995 | AC: 133 | AC%: 13,37  | Score: 1,40    Created by  2009 Waterloo Local Contest - Malcolm Sharpe    Added by  ejaltuna (2011-10-11)    Limits    Total Time: 20000 MS 
                                                            
                                                                | Test Time: 4000 MS
                                                            
                                                         | Memory: 62 MB  | Output: 64 MB | Size: 9 KB   Total Time: 60000 MS 
                                                            
                                                                | Test Time: 12000 MS
                                                            
                                                         | Memory: 3 GB  | Output: 64 MB | Size: 9 KB   Total Time: 40000 MS 
                                                            
                                                                | Test Time: 8000 MS
                                                            
                                                         | Memory: 1 GB  | Output: 64 MB | Size: 9 KB   Total Time: 20000 MS 
                                                            
                                                                | Test Time: 4000 MS
                                                            
                                                         | Memory: 62 MB  | Output: 64 MB | Size: 9 KB   Total Time: 120000 MS 
                                                            
                                                                | Test Time: 24000 MS
                                                            
                                                         | Memory: 125 MB  | Output: 64 MB | Size: 9 KB   Total Time: 60000 MS 
                                                            
                                                                | Test Time: 12000 MS
                                                            
                                                         | Memory: 62 MB  | Output: 64 MB | Size: 9 KB   Total Time: 20000 MS 
                                                            
                                                                | Test Time: 4000 MS
                                                            
                                                         | Memory: 62 MB  | Output: 64 MB | Size: 9 KB   Total Time: 20000 MS 
                                                            
                                                                | Test Time: 4000 MS
                                                            
                                                         | Memory: 62 MB  | Output: 64 MB | Size: 9 KB   Total Time: 120000 MS 
                                                            
                                                                | Test Time: 24000 MS
                                                            
                                                         | Memory: 312 MB  | Output: 64 MB | Size: 9 KB   Total Time: 60000 MS 
                                                            
                                                                | Test Time: 12000 MS
                                                            
                                                         | Memory: 125 MB  | Output: 64 MB | Size: 9 KB   Total Time: 60000 MS 
                                                            
                                                                | Test Time: 12000 MS
                                                            
                                                         | Memory: 62 MB  | Output: 64 MB | Size: 9 KB   Total Time: 60000 MS 
                                                            
                                                                | Test Time: 12000 MS
                                                            
                                                         | Memory: 62 MB  | Output: 64 MB | Size: 9 KB   Total Time: 60000 MS 
                                                            
                                                                | Test Time: 12000 MS
                                                            
                                                         | Memory: 1 GB  | Output: 64 MB | Size: 9 KB   Total Time: 120000 MS 
                                                            
                                                                | Test Time: 24000 MS
                                                            
                                                         | Memory: 937 MB  | Output: 64 MB | Size: 9 KB     Enabled languages    Bash  C  C#  C++  C++11  Java  JavaScript-NodeJS  Pascal  Perl  PHP  Prolog  Python  Ruby      Available in            Description    After writing a solver for the "movable maze" game, you have grown tired of it. After all, you already know the optimal solution. To entertain yourself, you find another puzzle game called "Pipes", and play that for a while. On one puzzle, you have not been able to find a solution by hand, and you think that there is no solution. You decide to write a program to tell you whether this is the case.

The game is played on a grid with R rows and C columns. Each square of the grid contains a black dot in the center and black lines in the direction of some, none, or all of its north, east, south, and west neighboring squares, with the following restriction: if two opposite directions both have lines, then at least one of the other two directions has a line as well. In other words, it is forbidden for a square to consist of a straight line. The objective of the game is to rotate each square, as many times as you like, such that for each square, if it has a line going in a compass direction (that is, north, east, south, or west), then it has a neighbor in that compass direction and that neighbor has a line going in the opposite compass direction. In other words, each edge in the grid should either have a line on both sides or neither side.

Your task is to determine whether a given grid has a solution.    After writing a solver for the "movable maze" game, you have grown tired of it. After all, you already know the optimal solution. To entertain yourself, you find another puzzle game called "Pipes", and play that for a while. On one puzzle, you have not been able to find a solution by hand, and you think that there is no solution. You decide to write a program to tell you whether this is the case.

The game is played on a grid with R rows and C columns. Each square of the grid contains a black dot in the center and black lines in the direction of some, none, or all of its north, east, south, and west neighboring squares, with the following restriction: if two opposite directions both have lines, then at least one of the other two directions has a line as well. In other words, it is forbidden for a square to consist of a straight line. The objective of the game is to rotate each square, as many times as you like, such that for each square, if it has a line going in a compass direction (that is, north, east, south, or west), then it has a neighbor in that compass direction and that neighbor has a line going in the opposite compass direction. In other words, each edge in the grid should either have a line on both sides or neither side.

Your task is to determine whether a given grid has a solution.    After writing a solver for the "movable maze" game, you have grown tired of it. After all, you already know the optimal solution. To entertain yourself, you find another puzzle game called "Pipes", and play that for a while. On one puzzle, you have not been able to find a solution by hand, and you think that there is no solution. You decide to write a program to tell you whether this is the case.

The game is played on a grid with R rows and C columns. Each square of the grid contains a black dot in the center and black lines in the direction of some, none, or all of its north, east, south, and west neighboring squares, with the following restriction: if two opposite directions both have lines, then at least one of the other two directions has a line as well. In other words, it is forbidden for a square to consist of a straight line. The objective of the game is to rotate each square, as many times as you like, such that for each square, if it has a line going in a compass direction (that is, north, east, south, or west), then it has a neighbor in that compass direction and that neighbor has a line going in the opposite compass direction. In other words, each edge in the grid should either have a line on both sides or neither side.

Your task is to determine whether a given grid has a solution.        Input specification    The input consists of multiple test cases (no more then 20).

The first line of each test case contains two integers R and C , separated by spaces, with 1 <= R, C <= 12 .

The following R lines of input each contain one row of the grid, from north to south. Each of these lines contains exactly C strings of letters, separated by spaces, that correspond to squares of the grid, from west to east. Their format is as follows: * If the string is the single character x, then the square does not contain a line to any of its neighbors. * Otherwise, the string contains some of the characters N, E, S, W, which indicate that a black line extends from this square's center in the direction of its north, east, south, or west neighbor, respectively. No character will appear in the string more than once. Input is terminated by a line containing 0 0. These zeros should not be processed.    The input consists of multiple test cases (no more then 20).

The first line of each test case contains two integers R and C , separated by spaces, with 1 <= R, C <= 12 .

The following R lines of input each contain one row of the grid, from north to south. Each of these lines contains exactly C strings of letters, separated by spaces, that correspond to squares of the grid, from west to east. Their format is as follows: * If the string is the single character x, then the square does not contain a line to any of its neighbors. * Otherwise, the string contains some of the characters N, E, S, W, which indicate that a black line extends from this square's center in the direction of its north, east, south, or west neighbor, respectively. No character will appear in the string more than once. Input is terminated by a line containing 0 0. These zeros should not be processed.    The input consists of multiple test cases (no more then 20).

The first line of each test case contains two integers R and C , separated by spaces, with 1 <= R, C <= 12 .

The following R lines of input each contain one row of the grid, from north to south. Each of these lines contains exactly C strings of letters, separated by spaces, that correspond to squares of the grid, from west to east. Their format is as follows: * If the string is the single character x, then the square does not contain a line to any of its neighbors. * Otherwise, the string contains some of the characters N, E, S, W, which indicate that a black line extends from this square's center in the direction of its north, east, south, or west neighbor, respectively. No character will appear in the string more than once. Input is terminated by a line containing 0 0. These zeros should not be processed.        Output specification    For each test case, output SOLVABLE if there is a solution to the puzzle, and UNSOLVABLE otherwise.    For each test case, output SOLVABLE if there is a solution to the puzzle, and UNSOLVABLE otherwise.    The input consists of multiple test cases (no more then 20).

The first line of each test case contains two integers R and C , separated by spaces, with 1 <= R, C <= 12 .

The following R lines of input each contain one row of the grid, from north to south. Each of these lines contains exactly C strings of letters, separated by spaces, that correspond to squares of the grid, from west to east. Their format is as follows: * If the string is the single character x, then the square does not contain a line to any of its neighbors. * Otherwise, the string contains some of the characters N, E, S, W, which indicate that a black line extends from this square's center in the direction of its north, east, south, or west neighbor, respectively. No character will appear in the string more than once. Input is terminated by a line containing 0 0. These zeros should not be processed.        Sample input  3 3 NW NW x NES NESW W E W x 2 2 ES x x N 0 0      Sample output  SOLVABLE UNSOLVABLE      Hint(s)              Recommendation  We have carefully selected several similar problems: 3675 | 3377 | 1960 | 3057 | 2809 | 3525    Close                       Universidad de las Ciencias Inform√°ticas (UCI)  2010-2016 | COJ v1.0 beta | All rights reserved In case of any question or comment, please contact us .        
